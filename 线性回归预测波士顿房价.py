from sklearn.datasets import load_bostonfrom sklearn.preprocessing import StandardScalerfrom sklearn.model_selection import train_test_splitfrom sklearn.linear_model import LinearRegression, SGDRegressor, Ridgefrom sklearn.metrics import mean_squared_errorimport joblib# 读取波士顿放假数据lb = load_boston()x_train, x_test, y_train, y_test = train_test_split(lb.data, lb.target, test_size=0.25)std_x = StandardScaler()x_train = std_x.fit_transform(x_train)x_test = std_x.transform(x_test)std_y = StandardScaler()y_train = std_y.fit_transform(y_train.reshape(-1, 1))y_test = std_y.transform(y_test.reshape(-1, 1))# 正规方程求解方式预测结果lr = LinearRegression()lr.fit(x_train, y_train)# print(lr.coef_)y_predict1 = std_y.inverse_transform(lr.predict(x_test))print("正规方程预测房子价格：", y_predict1)print("正规方程的均方误差：", mean_squared_error(std_y.inverse_transform(y_test), y_predict1.ravel()))# 梯度下降进行房价预测sgd = SGDRegressor()sgd.fit(x_train, y_train)y_predict2 = std_y.inverse_transform(sgd.predict(x_test))print("梯度下降预测房子价格：", y_predict2)print("梯度下降的均方误差：", mean_squared_error(std_y.inverse_transform(y_test), y_predict2.ravel()))# 岭回归进行房价预测rd = Ridge(alpha=1.0)rd.fit(x_train, y_train)y_predict3 = std_y.inverse_transform(rd.predict(x_test))print("岭回归预测房子价格：", y_predict3)print("岭回归的均方误差：", mean_squared_error(std_y.inverse_transform(y_test), y_predict3.ravel()))# 保存预测模型# path = joblib.dump(rd, "./test.pkl", compress=3)# model = joblib.load("./test.pkl")# y_predict4 = std_y.inverse_transform(model.predit(x_test))# print("岭回归预测房子价格：", y_predict4)# print("岭回归的均方误差：", mean_squared_error(std_y.inverse_transform(y_test), y_predict4.ravel()))